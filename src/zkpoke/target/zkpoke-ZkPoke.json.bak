{"noir_version":"1.0.0-beta.4+0000000000000000000000000000000000000000","name":"ZkPoke","functions":[{"name":"get_address","hash":"16619502947231131312","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[{"name":"instagram_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"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","names":["get_address"],"brillig_names":["get_address"]},{"name":"respond_poke","hash":"14953854945438394852","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"commit_hash","type":{"kind":"field"},"visibility":"private"},{"name":"intention","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"11873158822563704285":{"error_kind":"string","string":"Mismatch return note field."},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"18313900523101689315":{"error_kind":"string","string":"Note contract address mismatch."}}},"bytecode":"","debug_symbols":"","names":["respond_poke"],"brillig_names":["discover_new_messages","get_notes_internal","get_collapse_hints","field_less_than","decompose_hint","lte_hint","directive_invert","directive_integer_quotient","directive_to_radix"]},{"name":"poke","hash":"14110217961584633841","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"instagram_id_receiver","type":{"kind":"string","length":31},"visibility":"private"},{"name":"receiver_addr","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"randomness","type":{"kind":"field"},"visibility":"private"},{"name":"mask","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"11091894166229312484":{"error_kind":"fmtstring","length":20,"item_types":[]},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"18313900523101689315":{"error_kind":"string","string":"Note contract address mismatch."}}},"bytecode":"","debug_symbols":"","names":["poke"],"brillig_names":["discover_new_messages","get_note_internal","notify_created_note_oracle_wrapper","random","decompose_hint","lte_hint","field_less_than","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_invert","directive_integer_quotient","directive_to_radix"]},{"name":"nullify","hash":"1543198591436757886","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"nullifier","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VZzY7jRBBuJ3EyjuOd8Ce48A7OJDPJ3oKYgRtIcNizd2yjkRYNmhkQR1+4gISEhMRLcOEtEAfEhRsS+yg7Pdu1+fK57M0q7lltSVHbXdX1VVdVV3c7gdlQ4NoBvRtFZu3adD+adagrVQ1tI5F56trItT3g9zucbES4XepfpYtlpMyvQ/vnkdPp0z+i04P+dOT0fFJt9PNcLCXuHXNIxhzc/iZm8zx1zxGN8RFbj75P31Hs78HcLH1cecGei/5TP/pT0X/mR/8sdrnwg9M3gbzIvvv682/OL/Piozy/Kq6vMac4nm30Kjr7r6DzA9b52bdPnlyUF8XV2fcX1zc13drmIM896us12IX9SFqOW1q7Nt2PZiHN4X3X2tj91GBDF/jzxw+z8yw9sf5+1+l64e8vby6vsq+KL4os3zWOu+ZQRPPtYi5Cghc6faFi84B4Ivuha63ffyZb+x3bmt/61fr9PaeL/f7o6uKmMET7JnLSME6baMfFaBEQnjH1REL8sfG7qQemHti+qfunR74LFVunCg8LEvIQJ1Rw7ktXh4k9445EsYnzbAj9Hcb1eNc8E/yx0eO67saeF3k2JHuaYia+Gym2ThUe58ZIwRkpOG+SLj4AY84GDa0x+kbFOCjDMeh1iIN1LCScYYc4qOu02sYZdYAj6/eAZNauTfckLf6CFdL7I9faOX9qtucaKXMV28fQ/zr2OMEfk62+as+Y7GH/cN7Hiq1ThRfQc6zgxAqOpmvgQZe2xiPiaetSW0tn1TZPy08rf+meI2VeHcb2oZbnQsLjPEce+ovjPwHekHgJ8NAHTH16R19Yf/0CellO6NDoPkReqMxDeJFiq+D1q7pdIj+otvHWrj/djxZ23n+BHbw2Q8BtWgMoj7mLcUN51HFaPW+nph5n8bu2ZrgGdLFmxNe4ZrR4j8hGwUMZfOa9QuRvXBsZrzU3fRv08lw914RVQj5AShrmjTysF217AtcEzKP7qgnauS0gnYKJ8pYkLw+V8R7uR0wne1/8+QAcKHJI/BW4w8ks955MQO89RQ4pNn4r9XKVpmKT7BKhqWcv4ock/6N7xxUl7WAPO8tlNivnWZkdZ3m+OM+42qDfYg/4j4tZMS/Lcl5ki/KkvHf8WZlmR/nRMj9fHa2W2dHL8PHzt/ZV4rR63tqK9ivowionseex8rdDSPK/m43O39yzdloJiIdfRPgko92GhYc3sQHxsNoPCRtPjm23gqkynnc0T7vpQjslBYQd+8He+UuS4I9NfRf1cZvTToV46uKb+sRTbMSeRLFHO6W+dft7YOoxQ/tEF56Q+MaGvufTJ+7kfGrF2I2Ip50grY3a2kQ9qEurE9q6e9mXQDmdhKT/D9fa8X+6Z60+cF3B+tB2Q+K6gnnMt3PtpoGnTj6RaTmCcQ8JG/Mj2UHXqAX7gSKftGCjXTiWsZvyWLthim883zCPtRsm1osQcJviqH1lafOlFscpyaPvtHXM6xFxY+K1fc3BPJX8xfWi/YszBDk5AxxKX2U28602YyyN3PsAbEJ5mUNI8n8D3j9g151sVcezcv+3yAUN7Z0OpW9QbfdFVV2+X9XlBXtc1W0UXgw8zDVLE/eO/kJdYkdI8v+5d4nJAYyR8VMF/4Dwt+xW+vjv6liRjxV5G59/RZ9rce5dnwHuMEk/9rFtkjt2HT0DAUu70lgnAAA=","debug_symbols":"7Z3dbhoxEIXfZa+58Ph/8ipVFZGERkgIIkIqVVHevbsVXpKslQV7aFX53ERsmMH2x2Cfs7De1+5hdffyeLve/tg9dzffXrvN7n55WO+2/dHr26K72683m/Xj7ft/d2r4Q+FP/PPTcjscPh+W+0N3Q0Zbt+hW24fhsYmqf40f682qu2F+W0zDldYpWll9CvaZYMsqHIMtkx+Dvc0ER2vjMTjaIeIU/H3RURTpPHOKJuK/13kW6byLI/k4Q55cSJ0nb8zXnWdn7DGY+7xPnddKuPOkP3R+aIKu34S+fhMm14Rmm+BqfteAo0wDmo0Zg10cg8nn3uQQjTpGhzi83ldvcvA61X7wPn4dTGTZjCN12n+uCdvOUJ3AUNkfg40i+jDUoQV/9RbC1VuIV2+Bq1swFFKw0UrNlFzUMa10ffHZmflfxTSPRDJ+ruS8GhdR8tZ8Kjmj2hkq1Q9Vj/0xRrmZoZIa17p+Nj/1nrLLaOBxeQjMpwlfR5PriUtDte/0gla5WE1MaYha8Uy0Gyc0Z9SH2IGhBsNqhgYMqxlaMKxm6MCwmqEHw2qGAQyrGUYwrGbIYFjL0CowrGYIn1LPED7lLIacztx6chOG8Cn1DC0YVjOET6lnCJ9SzxA+pZ4hfEo9Q/iUaoYOPqWeIXxKPUP4lHqG8Cn1DC0YVjOET6lnCJ8yZThwgffIc4GfyHOBR8hy8dD9eS7Q8nku0Od5LtDceS4WXLJcoI3zXKB381ygd/NcoHezXEKz+kXH9DMIbZSeiSan06Ut5GyYUGxW7YhSbFYbiVK0oChAsVndJUqxWZUmSrFZTSdKsVkFKEqx2fOjkhRjs2dTRSnCu0hQhHc5j6IftyVxceKjI7yLBEULigIU4V0kKEJ1n0XRqJFiP94JRahuCYpQ3QIUGapbgiJUtwRFqG4JilDdEhQtKApQhOqWoIhvDCQowrtIUIR3kaAI73IexREIGTc5S0sK5kUEI9yLCEbYFxGM8C8iGC0wSmCEgxHBCAtzHsbxetb+YZxihIcRwQgTI4IRLkYCIzUrvwOlGyfo8Gnbxcui/2BsVn5fhLEfy/jLJx8y1dis/JbFaIFRAmOz8lsWY7Py+zKMIYx3VAqspxibld+yGJuV37IYm5Xfohh1s18iyGKEixHBCBcjghEuRgSjBUYJjHAxIhjhYs7CyKffnrDOYISLEcEo4WJMasJoP4fx393slCTuYfu/jFXiJrb/zVipnbHm7xYRbEoK1k8+4/ld6U8T1Pv7f485uiDHFOTYghxXkOMLckJBTvb9IaXHd1V5N83ikqz8zq2zWVSUpYuyTFGWLcpyRVm+KCsUZRXVhi+qjVBUG/ndzr6eXfJ7e7FK3xazzuQUfOrze+XMtBMLcvjynPyuHzM5BbNyLJiVY8GsnL9an32qAw7T2slfmz6T4wty5mblXE4sYMCX5+SvQ53JKagDLqgDLqgDLviccsHqzAWrMxesznxpHbz1hz+X+/XybrN67lOGZ1+294f1bns8PPx6Ss/c7debzfrx9mm/u189vOxXt5vd/fBcp45/vule3Wlthr4Mh2TMgkwcDocqoH6iJWv7VvuWfwM=","names":["nullify"],"brillig_names":["nullify"]},{"name":"register_info","hash":"7837177421550333648","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"instagram_id","type":{"kind":"string","length":31},"visibility":"private"},{"name":"full_name","type":{"kind":"string","length":31},"visibility":"private"},{"name":"partial_name","type":{"kind":"string","length":31},"visibility":"private"},{"name":"nationality","type":{"kind":"string","length":31},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["register_info"],"brillig_names":["discover_new_messages","random","notify_created_nullifier_oracle_wrapper","notify_created_note_oracle_wrapper","decompose_hint","lte_hint","field_less_than","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_invert","directive_to_radix","directive_integer_quotient"]},{"name":"register","hash":"3255538054088552580","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"instagram_id","type":{"kind":"string","length":31},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["register"],"brillig_names":["register"]},{"name":"get_pokes","hash":"11030475801169773039","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"page","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":10,"type":{"kind":"struct","path":"poke_note::PokeNote","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"instagram_id_receiver","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"instagram_id_sender","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"full_name","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"partial_name","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"nationality","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_pokes"],"brillig_names":["get_pokes"]},{"name":"public_dispatch","hash":"822614769848805719","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"2830029349304997821":{"error_kind":"fmtstring","length":27,"item_types":[{"kind":"field"}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["public_dispatch"],"brillig_names":["public_dispatch"]},{"name":"create_commitment","hash":"6166533168489563936","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"commit_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VaQW/rRBC24ziJk/glPITEz7Abp2lvQa+lnODAAa5+iQNFD/WpLQghIfnAnQs/AyQk/gQX/gVCQuKAuHBDZJud5suXsZMQ+wlGqna9MzszOzszO7up66zBtW2Tvh2FZmrb6DiIK+QVqYqWgdD4thPY7wbgvQoXG5DcKvmfRcl5oKyvQv1HgeVZp32EZw38o7bl806+5s9rMRDab/QhmdNZ/vWddf+p7Qc0p469rdH20euK/g1Ym4FneS2yR8L/Avg7Fa5N+F/Wo/8j/7fr0f8xb1zVo3/cc1a+/InlZ/x7aPvp55++93J2M8/ems9vs7s7jAn2xzI4hKd3AM83mee7n714cb24zm4vv7i+u9/irR1u0m/QWKNALxxH8EmG6GZs+9L2A4X31LbRkRCSnri2QFl/hT6UuCTPcbb3EeV3nVpzfeySPNGH7SP7ILbzFV2HCg79HnEox1fkvCpevN8GpraNDoMTHggVndjPWjBe4b6O9/Uzkd9VbFSHn7VIn6I9E9u1FV2HCo59o63IaSty/k+8xEdDZ9tn3YJW5PAYy+F8h3K8CuUgjU9y/ArlIC+pZ0ROq0I5yOsiX7US27ivU9tGx0EivDugW4Vxei424jsS2q8Lstkne6QX4vqA470PAdci3BPAYTwwePSNdjLtHfBlOoFAkVOhfc9C0guBba/Zt0t6IQ5tz/ZF27N90fZaHAho9hU77WvfgSKnRfKFZ5PGBS7yVesT/Ye2rTlGoqfA1yFZdd5vlzDhcxEhVNbN/hOQXohD32L/Qd/C/WLQfETojF7fA1+mE9B8xCN+Wr2KPOQOOFDmNwv08xXaRoHcfX1T6D62rbHBr7ZvYvIN23+8l71/f3ObfpR9cHt9nzkERRctVrbo4mU2URygmW/ymdrx6AiYnEWRGMPL14bwFF2agEf6G/uNziht8wg9F5M0XozSRTpO5/NklnIQo916Nch/nsXZaLFYjLI0WZwudsrHhwZxYr4sIE4rFMU5JSHgOCaQi3zV+kT/pW0lqXHymP5LWzBoCTWgNeCh4JE9DDyjNQj9t7Y1tF85mzbjgwdxWhE/cPSDBXHa4S38xad8WEOnZA1C/7VtDe1vti8JVOIG11NnjC8hMXr8Dnqgrg/655vr7gHOU+g5yfYVejyAxGZDoseDy6Vv5IU2vyJdxYYthR75+UT/jW0NbcPd1A/9uku649rbhNMuS9qFLQCdv7P9mh8YDi5EXMJhnPClf98it+wXOK0QEVscWohUkSeaJO+/Erd40eO4xRj1FHqO211xfpmv2qGzvZfs39pZcEjMGLgieegvsjcYM3zuag8TsgYz7wfgh/uI+R3ncn4X+p9Alx9tf+Do+Qxx6Jfse3yBRZzml9r5xX6Pe1/mD0NlvtDVXEsk2nnkkuxePbL3fnQV+V1Hz3fTavSJy+ISayd+DO/XtDeiT6joo9UDrzmrxx/eM9RPeGnnoZZLOM9gLuGzGfeO84yWS4yOZbW6S7y0PKHF3a5Hc8lzXPv+bFsz/xfb1/ID5xXMD5xXtAcEwWkPg8Jfq+mwDuOzRPMRrc4T2egf4R682iWynyj0YYls1AvnsuwiP9ZqAnxQMtAEXJU5S6sJMF9wTVBWmxvYx5baPg6JHm2nxTHHI8rtEQ7jj3MD+qn4L8aL9oMn3hGkBqj6vSA6mc9Os5Plk8rkND45n7/q94rZ+PT5LBmnURY/aLNL/kBskq/x6M8G2vZb7vBML/x8ov9DaJd/f9q++IavyDN0rltM5xa0DzyUsWa+ORbk2/Revk0vsrv5to6C6wEOY81A336jvZCX6OET/d/2W/akA3Nk/lCR3yH5G3orY/xPLT2FvqfQm/35S/jZFtdedQ30IJP44xjrJr5TR1wtQ2oySydxfJ7EWRKPd8XVP5kH8rB6KgAA","debug_symbols":"7Z3dTuNIEIXfJde56Kqu/uNVVqtRgDCKFAUUYKUV4t3X3o3tBBd4cto7EnLdjMioPrrzuW1OOY79trrf3r7+/LE7PDw+r27+eFvtH+82L7vHQ/Pq7X29uj3u9vvdzx/n/71y7T9U/q1/ftoc2pfPL5vjy+qGPEtYr7aH+/Znn13zOx52++3qppT39bjcMXfVTngojkqxFJdOxVIo9sVRlOIskk/FWdqKofjP9YrdLJMvpasmKr9v8jTL5EPuzecJ8xRSN3mK3n89+RK8nIpLw32cPM88eeKLybdD+P9/CNGGkJRct41TGQYIpA4Q/bB6BqcUsroF4qmY3TAZz06pTaV/o6mUoZqzV6p96PZAOVuW7LRapkLdNNiVierA3e4RvLuobQ0GM1hpMJrBSoPJDFYazGaw0mAxg3UGvTODlQbJDFYaZDNYadCbwUqDYgYrDVpPUmvQepJfMFi6kymRwsig9SS1Bq0nqTVoPUmlQbGepNag9SS1Bq0nqTVoPUmtQTGDlQatJ6k1aD1JrUHrSWoNWk9Sa9B6kkqDwXqSjwZbK9ZnaFasd9CsWD+gWRGzolix3K5ZsSyuWbF8rVmxzKxZsRysWImWbTUrlm01KwvNtpy7D+7Zn82js7LQbDthRcyKYmWh2XbCykKz7YSVhWbbCSsLzbYTVhaabb+2khaabSesLDTbTlixbKtZsWyrWRGzolixbKtZsWyrWbFsq1mxbKtZsWyrWMmWbTUrlm01K5ZtNSsLzbaJ+mmkD99Du666dSjmcNIhxdjpoJjyyOFCc/OsDheasmd1uNBMPqvDhSb46xym1L/DVMZ/lxea9+d0WBbaHczqcKG9xKwOF9p5zOrQ+pR6h2IOqx1an1Lv0PqUeofWp9Q7tD7lFxwW19+luvDYofUp1Q7JzdCoUO7vN80SJiSGULpfHTMPNwinVulYY+yuh05nzX7T+f83efrOk+fvPHn/nScvU5PPZ9fe65MX141AwuliiHF15tzt39m7i5viK8Uud0eOTH7idvtE0fWPIaAo/ry8fa+kBp6LhxfE0fetiRJEqX/UmuNqf8aOJI+pglCfPAZhiiKI0m/8T3Ewn8c29NvEk++/6N78qIwVISpBVIaoglDeQRRBlL69AvdbOUgaUx6iBKICREWIShCVIUpfGyH2GSTk0beaSL/l3CRFEMUQ5SFKICpAVISoT44AQ2b0PN6/pCBUcBBFEMUQ5SFKICpAVISoBFHQ2gjQ2oifrA2Rngrjo00kiGKI8hAlEBUgKkIUlBwilBwilBwSlBz0y36TdJEtSRwz6vyGRr6E8Tj6ZYATDAEMA4wHGAGYADBQX5KhvkS/KGCSKgilf/A7SRFEMUR5iBKIChAFrY0CrY2CrA3Wz5p9eXRh/WTV8Gy9wgpz/V7PLgDjRIBJAJMB5vqjMpMDGAIYffv0JwZKGq8d8gAjADN1VNaYCDhIAJMBBlgHDKwDBtYBA/spe4ARgAkAc+06eG9e/rU57ja3++3p+asPr4e7s8exvvz9tP3wZNan4+Pd9v71uG2f0To8nrXdZuzjmkNqj9Dty+YgvG4+oGlftluHQ15zdM2ozcj/AA==","names":["create_commitment"],"brillig_names":["create_commitment"]},{"name":"sync_notes","hash":"7040700674414103597","is_unconstrained":true,"custom_attributes":["aztec::macros::functions::utility"],"abi":{"parameters":[],"return_type":null,"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"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","names":["sync_notes"],"brillig_names":["sync_notes"]},{"name":"get_intention","hash":"9853863734911274389","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[{"name":"commit_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_intention"],"brillig_names":["get_intention"]},{"name":"trial","hash":"18075210787082439206","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[{"name":"caller","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":10,"type":{"kind":"struct","path":"poke_note::PokeNote","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"instagram_id_receiver","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"instagram_id_sender","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"full_name","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"partial_name","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"nationality","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["trial"],"brillig_names":["trial"]},{"name":"constructor","hash":"16334398393229722181","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"parameters":[],"return_type":null,"error_types":{"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"7Z3bTus6EIbfpddc2OPxab3K0hbitFCliqICW9pCvPtuuxqnkNCAcT1p898gQmea8ddJPL9TPK+z27vrl/vL+cOf5dPs1+/X2WJ5c/U8Xz6sj17fLmbXq/liMb+/3P/zTG1+aLe1f3q8etgcPj1frZ5nvzR5rS5mdw+3m9+Ds+v3+DNf3M1+xfh20TW30TXWTrvW2PUYc1R+Z8xxz9hxj3FgDjvjwBuL1vifi5n2JYJ3JqbgAx0Onsg3b02GWmPNpvetHTdv7TW/s96EH047/HjS4ZMqHn48HL53ZmfrfZv3TNto9KiioVFFY0YVDZeIxpNJuen94WiMUs3t1SgXB9KelG7ur6R86KS9Pe3w3WmH70uHH/gHqRxGFU0cUzSmyPQQOFkHO1AYWROacCwrOlwYaWWtbd5a2eg+lEZGn3b4dNrhm9MOn087fHva4bvq4TO34dvwMR4/snhC/Xg0t/HEwx+vi9RMKqqdf4j+zirxdGPnMjOia2MPeiB2G1MeOD0Qu4++qbyCYj0QxsA1yHpCY6UJjdVMaKw8obGWmfI1tWPlIVmom5VJo3nAOOi0FBVItRMahT4NyaFdIV2bJ2tj7XasbkJj9RMaa5jQWON0xmrVhMaqJzRWmtBYzYTGyhMa64TqJjuhuslOqG6yI6+bSLdjtXpgrD5yo3N8jDRgbWwTNO99k4JU75MpHfXOmEjFAWtLzdNSa9Q72w3xkVdv50fcjbyGPEPiI69kz5D4yOvpMyQ+8qr+DIkziFcmPnKFc4bER66zzpD4yNXeGRKH5qxNHJrzCMRjs7DitP1I3ENz1iYOzVmbODRnbeLQnLWJM4hXJg7NWZs4NGdt4tCctYlDc9YmDs1ZmXiA5qxNHJqzNnFoztrEoTl/SnxDkUGxAEVowxIUofdKUISGK0ERuqwERWitAhQj9FMJitBEJShC55SgCO1SgiKDYgGK0C4lKEK7fIkimZYiU4citEsJitAuBShqhYKxCEbM0l/C6HWzIyn5D9+U/Z71Fjom9fLQtWu3TXJ728Am6KgBBKCjZBCAjgpDADoWU48A3ft2a+nYrV401l4FoKPyFoCOlV0B6FgIFoDOgF4fOhSpAHQoUgHoUKQC0KFIBaBDkdaHTlCkAtChSAWgQ5EKQIciFYDOgF4fOhTpEaBHlTqyRuqBDkUqAL2MIk3/jaejMfsct+cIFc4Rj3+OMi1CY2wSg5QearBkUjt0a1wbEDn7N6IStec6FVSKiMNARCo0xutf37Xq67lkrG7GGva3eNt1cy/S9JPaa5iUVYejj7a5dGLUXZqmzOfLbTy6k0Nc4Ry2wjk+uVnH1BFsnZzkDp/D+uajc2rgSuDY9gSIe/fI/rzjdNkEdtzJO18gdpdgOjPQxp49pdu7Z3849uhMylHnQid2rKt8aZI0qvksyezdZZtpj7FSUgQj1j6KYMRqxte+ThxiwqhoqPJV6a6rlbNd6FjNEIDOgF4euk4FvNbc/Xbg2Julnid0rGYIQMfzdQHoeL5+DOgu8dChO5GOvfHqaUI37fqfid1MH3sH2POEjjpdADoDen3oqNMFoKNOF4COOl0AOur0I0C3lOjZvWc7CTqe19SHju7JEtChSAWgQ5EKQIciFYDOgF4fOhTpMaC79JVMG2IXOhSpAHQoUgHoUKQC0KFI60NHb2UJ6FCkAtChSAWgM6AfYT29/dcpQ931dHT9lYAOcSQAHeJIADrEkQB0iKP60NEEWAI6xJEAdIgjAeh4XCcAnQG9PnQoUgHoUKTHgM6coNvug2l0MpaADkUqAB2KtD50tFWWgA5FKgAdilQAOhRp/X9/QUtoCehQpALQoUgFoEMc/RT6GiP1N9Xz3JzBs+v69E6n7RCiDV0fzvCxGT4uw8dn+IQMn/h9n09aTBze9os+6ZEw5EVZXibLi7O8bJaXy/LyWV4hyyvmeJms3DBZuWGycqN/993Dd5f+3XTb7Wgj9fhkXPX9O7sePk//NqYDPjrDhzJ8Mu7KnHFX5oy7cv/mbDFtuRR9N3f69xYb8AkZPkN35R4fq77PoH8HqQEfyvDJyAObkQc2Iw9sxnVqM2ZnmzE724zZ2X03D97Wh/9ereZX14u7p7XL5tWXh5vn+fJhd/j832PzyvVqvljM7y8fV8ubu9uX1d3lYnmzeW2mdj9+kzcXFHlTEG8Plb4g5TaHm2yjaNev+vVZ12f+Hw==","names":["constructor"],"brillig_names":["constructor"]},{"name":"update_commitment","hash":"5685591207362087668","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"commit_hash","type":{"kind":"field"},"visibility":"private"},{"name":"intention","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VZzW4jRRDuiWdsjx0n5k9CPMWMPY6Tm9EmhL3AgQMSt1l7jIJ2tcgJKy5Ic+POhccACYmX4MJbICQkDogLJ9xxV/L5mxrHXs8sbElW90zVVH1dXVX9Y8+syHM/S75rD0yRRGbi2mg/iivUFdWJ06sJ55qTPVNOwmu7Tkjf29eNCgcckt0q9Z9GSRoq46sQ/zAEnTXoH4h+vx79Ucvp+TBf12/Irrx7nN/78jF8Y389s57gqFd4GIfyfXv5OzL3/bddPyR9dcQGYqrat28p+A9gbJYe5bXYHor+c9BvKhyb6L+oB/+d/g/qwX9Xdy7rwR93zSqWnzl9h8tf3/XTF88+/nL6fJa9P5stsutrzBfOv020i05/B53vss6Pvnr69Gp+lS0uvr66vinoDhTd0j8oGRvj0jYBxulGG++51vr22vVDRffEtdGe1COcOLZQGX+FMZR4ZM+YYmyg/Y6pda2IPbIneNg/Mpfiu6aCta/wcGzIQztNxc6r0sXzbWni2mg3GvCLnoKJ46xFmF7SNtNo2zgT+50SH02qwXMXZy3CUzZn4ru2grWv8Dg22oqdtmLnddIlMdozxZj1Slqxw+/YDtY7n+z4FdrBOtYkO80K7aAu2c+InVaFdlDXeb5qJbdxXieujfajRHTjGavCPE3FRx1TJOF1wTbH5CHwOI56wOO5PwJei3jHwMN8YGrQM/rJfvcC9LKcUGj0HJ6452g/OusRLiT2veZf9D37F33P/kXfs3/R91oeCGn+FT9t699jxU6L7ItOn94LneerNiD5z1xbc45Eb4JeQ7bqPN8u6ZTXRaSeMm6OH4wtjh+MLY4fjC2cLyYtRkTOYv4R9LKckBYjHAvafhV1yBnwWPk+KMEXKLK8fsvztrEp8l+41vrg9xLctsUzk/X5O65/d2775Ob5Iv08+3RxdZMZIj6Y8cLtKXJINgAkePz8/ruqAnh8GkWCoeH0B6YYNGg/IPmFe8ZAxvFOXhLnfJzG82E6T0fpbJZMU05y9Fu3BvtPsjgbzufzYZYm85P5g/bxIkKCXDvgCK9FOKVfVnC1jQ0X3G9c+18WXI/w+kY/WDyiMYj89661sjn5rEk2kIf+PCCedgA4VnDzPEhMBUY/HPAYRP5b11rZP1xfCqzkDY6nzhxfUmJx/Ak4EOst/nx93F3gNRR5vMzFxQjlcfESn/VNcfEKSJe2kKDPLwmr+LCpyKO+gOS/c62VDbx1fBjXHcKOY+cDcEOxqx20QsD8g+uHRq8ZE/cc7Udj7bAlpB3uPeJhnvClQIcwI0/bIHsKBm2jIr7YdaNSRZ3wyd7/JW/xoMJ5iznaUOQ5bx/K84t81fZNcS45vrW1YJecsXRJ9jBeZG4wZ3jd1S5iZAz2u59AH84j1nf8luu7yP8CWH52/WOj1zPkYVxy7PHFI/K0uNTWL457nPtN8aBdyPIBqqa9RKKtRx7Z7tZje+tLWbHfMXq9m1SDJ96Ul9qlrPjnsKa5ETw9BY+2H3jDrC4veM4Qn+jS1kOtlnCdwVrCazPOHdcZrZZYjJv26h7p0uqElnfaHyFYV6TO8d73V9fa739zfa0+cF3B+sB1hfMWedrlg+jX9nTaxfimGNH2eWIb46O3ha7WBttHinxvg23Ehd+y7bI41vYE4pua9wQjbU+A9YL3BJv25pa28aU2j32SR99pecz5iHa7xMP849qAcSrxi/nCewDMR9wDVH1fEA1m05NssLxSGZ/Eg7PZq76vmI5OnkyTURpl8S2ah+zLJX4zv+djPFtquWc5w7O86AtI/i+RXf7+dn2JjUCxZ+V8r1zOK2lvdSjv/Hz9XZgX5Rt5UV5sd/IiRuF1gYe5ZunQPaO/UJfgCEjecwpkTtrwjXzfV+y3yf4abuUd5hzraijvRN7Ozz+iz7U49qr3QLc2ST++Y2wSO3Xk1TKlxtN0HMdnSZwl8eihvPoXs/UQzIYrAAA=","debug_symbols":"7Z3dbts8DIbvJcc5ECnqh72VDx+GtE2HAEFapO2Aoei9z95iO625aqG8AYV4MjQDn0h5Irsv3cR6Wd1ur5+/ftkd7u4fV1f/vaz29zebp939oXv08rpeXR93+/3u65fz/165/h+En/WPD5tD//DxaXN8Wl2BRwrr1fZw2//ss+ue4263366umF/X83KHOFQ7wqk4CsXELp2KiSGOxZGE4kyUT8WZ+oqp+P/1CnGRyTMP1QD87ybvF5l8yKP5XDAPIQ2Th+j9x5Pn4OlUzB33fvK08OQB30y+HyL8/SGiNEQIzp2YEHAaIIA4QPTT6pmcQsjiOxBPxeimyfh+kFlt4vGFJuapGrMXqn0YjkA6W5bopFoEhmEa6LhQHXA4PIJ3b2p7g8kMVhrMZrDSIJvBOoPemcFKg2AGKw2iGaw06M1gpUEyg5UGgxmsNGg9Sa1B60lqDVpP8gcGebiYEiHMDFpPUmmQrCepNWg9Sa1B60lqDVpPUmuQzGClQetJag1aT1Jr0HqSWoPWk9QatJ6k0mCwnqTWoPUktQatJ3lvsLdifYZkhcyKYMX6AcmKZXzJiuV2yYplccmK5WvBSrTMLFmxHCxZsWwrWbFsK1mhNq1gHv5wj/5sHoOVRrNtwUqj2bZgpdFsW7DSaLYtWGk0235sJTWabQtWGs22BSuNZtuClUazbcEKmRXBimVbyYplW8mKZVvJimVbyYplW8FKtmwrWbFsK1mxbCtZsWwrWSGzIlhpNNsmGKeR3n0P7bLq3mGjSfgihxDjoANiyjOHjebmRR02mrIXddhoJl/SITea4C9zmNL4ChPPfi9zo3l/UYeNdgeLOmy0l1jUIZnDaofWp9Q7tD6l3qH1KfUOrU+pd2h9SrVDcNao/IFEduNtqhkFidapLCBxgVYF8njHaaRQkBgCD08dM063CIde6VxjHD4Rnc7a/a73/zV5/5knT5958uEzT74cRz0XJk9uGAEI05sh5tXZw3AQZo/TU4u3oY88nAuSm6x4n3/NPf3ruWPGce6OPp57dnk462Xwhc0CAKIbN1GASP68vH+tIEaNN1svxNm3xQGdipJ3hQA/Xm8EynMKVZRXUaSi5D0FIE7ms2AjyzsRjF/T734UxmINJd+Ku0iBikIV5VUUqSj5/erOpgMVKM2pqKKSisoqijWUfEvEIgUqSl4bIY75KWSeU15FkYoKKiqqqKSisopiDRV+cwaY8q7H+fEVUEV5FUUqKqioqKKSisoqijVUdCpKtTaiam3E36wNopEK87NNJBUVVFRUUUlFZRXFGiqpkkNSJYekSg5JlRzkj+cmGvsCijNG/kDidBGCw3wc+eN6BYYUTFAwUcEkBZMVjKovYVVfIv85vkihivIqilRUUFFRRSUVlVWUZm2gcyoKVJS/+OyC8rWqaWdARoG5/KhHlxXj8OUMOAUDCubyszKCVzCkYOT3Z7wwwGm+diAqmKRgSmdlieHLHcjXigoMKBjFOkDFOkDFOkDFcYpRwSQFkxXMpevgtXv4bXPcba7329PusXfPh5uzzWSfvj9s3+0r+3C8v9nePh+3/Q6z0+ay/XpCz2uMrv9t0D+Ern3oLs31D/uVg92laYy+G7Ub+Qc=","names":["update_commitment"],"brillig_names":["update_commitment"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"ZkPoke::respond_poke_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"ZkPoke::respond_poke_parameters","fields":[{"name":"commit_hash","type":{"kind":"field"}},{"name":"intention","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"ZkPoke::register_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"ZkPoke::register_parameters","fields":[{"name":"instagram_id","type":{"kind":"string","length":31}}]}}]},{"kind":"struct","path":"ZkPoke::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"ZkPoke::constructor_parameters","fields":[]}}]},{"kind":"struct","path":"ZkPoke::nullify_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"ZkPoke::nullify_parameters","fields":[{"name":"nullifier","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"ZkPoke::poke_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"ZkPoke::poke_parameters","fields":[{"name":"instagram_id_receiver","type":{"kind":"string","length":31}},{"name":"receiver_addr","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"randomness","type":{"kind":"field"}},{"name":"mask","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},{"kind":"struct","path":"ZkPoke::register_info_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"ZkPoke::register_info_parameters","fields":[{"name":"instagram_id","type":{"kind":"string","length":31}},{"name":"full_name","type":{"kind":"string","length":31}},{"name":"partial_name","type":{"kind":"string","length":31}},{"name":"nationality","type":{"kind":"string","length":31}}]}}]},{"kind":"struct","path":"ZkPoke::update_commitment_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"ZkPoke::update_commitment_parameters","fields":[{"name":"commit_hash","type":{"kind":"field"}},{"name":"intention","type":{"kind":"integer","sign":"unsigned","width":8}}]}}]},{"kind":"struct","path":"ZkPoke::create_commitment_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"ZkPoke::create_commitment_parameters","fields":[{"name":"commit_hash","type":{"kind":"field"}}]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"ZkPoke"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"regs","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"public_regs","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"userinfo","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"intention","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"pokes","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"nullifier_storage","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}}]}}]}],"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"PokeNote"},{"kind":"struct","fields":[{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"sender","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"instagram_id_receiver","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"instagram_id_sender","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"full_name","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"partial_name","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"nationality","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"},{"kind":"string","value":"UserInfo"},{"kind":"struct","fields":[{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"instagram_id","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"full_name","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"partial_name","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"nationality","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"},{"kind":"string","value":"AddressCommit"},{"kind":"struct","fields":[{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]}]}},"file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n","path":"std/array/mod.nr"},"5":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"16":{"source":"use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n","path":"std/embedded_curve_ops.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"42":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"43":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"51":{"source":"mod poke_note;\nmod user_info;\nmod address_commit;\nmod utils; \nuse dep::aztec::macros::aztec;\n\n#[aztec]\npub contract ZkPoke {\n\n    use crate::poke_note::PokeNote;\n    use crate::user_info::UserInfo;\n    use crate::utils::as_field;\n    use crate::address_commit::AddressCommit;\n    use aztec::{\n        macros::{functions::{initializer, private, public, utility, internal}, storage::storage},\n        messages::logs::note::encode_and_encrypt_note,\n        note::note_interface::{NoteProperties, NoteType},\n        prelude::{AztecAddress, Map,  PublicMutable, PublicImmutable, PrivateMutable, PrivateImmutable, PrivateSet, NoteViewerOptions, NoteGetterOptions, RetrievedNote},\n        protocol_types::{ traits::{ToField, Serialize, Packable}, hash::poseidon2_hash as poseidon2},\n        utils::comparison::Comparator,\n    };\n    use dep::compressed_string::FieldCompressedString;\n    \n\n    #[storage]\n    struct Storage<Context> {\n        // Regs is not being used currently. Instead, public_regs is used.\n        regs     : Map<Field, PrivateImmutable<AddressCommit, Context>, Context>,\n        public_regs: Map<Field, PublicImmutable<AztecAddress, Context>, Context>,\n        userinfo   : Map<AztecAddress, PrivateImmutable<UserInfo, Context>, Context>,\n        intention   : Map<Field, PublicMutable<u8, Context>, Context>,\n        pokes       : Map<AztecAddress, PrivateSet<PokeNote, Context>, Context>,\n        nullifier_storage   : PublicImmutable<Field,Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor() {\n     \n    } \n\n    #[public]\n    pub fn register(\n        instagram_id: str<31>,\n    ) {\n        let ig_fcs         = FieldCompressedString::from_string(instagram_id);\n        let instagram_hash = poseidon2([as_field(ig_fcs)]);\n        storage.public_regs.at(instagram_hash).initialize(context.msg_sender());\n    }\n\n    #[private]\n    fn register_info (    \n        instagram_id: str<31>,\n        full_name: str<31>,\n        partial_name: str<31>,\n        nationality: str<31>,\n    ) {\n        let user_info_note = UserInfo::new(\n                context.msg_sender(),\n                FieldCompressedString::from_string(instagram_id),\n                FieldCompressedString::from_string(full_name),\n                FieldCompressedString::from_string(partial_name),\n                FieldCompressedString::from_string(nationality),\n        );\n\n        storage.userinfo.at(context.msg_sender()).initialize(user_info_note).emit(encode_and_encrypt_note(\n            &mut context,\n            context.msg_sender(),\n            context.msg_sender(),\n        ));\n\n        //let ig_fcs         = FieldCompressedString::from_string(instagram_id);\n        //let instagram_hash = poseidon2([as_field(ig_fcs)]);\n\n        \n        //let register_note = AddressCommit::new(context.msg_sender());\n        //storage.regs.at(instagram_hash).initialize(register_note);\n    }\n\n    #[public]\n    pub fn nullify(nullifier:Field) {\n        storage.nullifier_storage.initialize(nullifier)\n    }\n\n    // TODO: Later, the hash of the note will directly be taken in the private contract; and the commit_hash will be updated accordingly. Time limit issues.\n    #[private]\n    fn poke (\n        instagram_id_receiver:str<31>,\n        receiver_addr: AztecAddress,\n        randomness: Field,\n        // four booleans are packed by the caller to prevent manipulation of note context\n        // into a 4-bit mask: bit-0 = ig, bit-1 = full, bit-2 = partial, bit-3 = nat\n        mask : u32,      \n    ) {\n        let ig_rec_field = FieldCompressedString::from_string(instagram_id_receiver);\n\n        let s = storage.userinfo.at(context.msg_sender()).get_note();\n\n        let vals: [FieldCompressedString; 4] = [\n            s.instagram_id,\n            s.full_name,\n            s.partial_name,\n            s.nationality,\n        ];\n\n        let mut masked: [Field; 4] = [Field::from(0); 4];\n\n        for i in 0..4 {\n            let keep      = (mask >> i) & 1;          \n            let keep_f: Field = Field::from(keep as u8);  \n            masked[i] = keep_f * as_field(vals[i]);     \n        }\n\n        let poke_note = PokeNote::new(\n            receiver_addr,\n            context.msg_sender(),\n            ig_rec_field,\n            FieldCompressedString::from_field(masked[0]),\n            FieldCompressedString::from_field(masked[1]),\n            FieldCompressedString::from_field(masked[2]),\n            FieldCompressedString::from_field(masked[3]),\n            randomness,\n        );\n\n        \n\n        storage\n            .pokes\n            .at(receiver_addr)\n            .insert(poke_note)\n            .emit(encode_and_encrypt_note(&mut context, receiver_addr, context.msg_sender())\n        );\n    }\n\n\n    #[public]\n    fn create_commitment(commit_hash:Field) {\n        storage.intention.at(commit_hash).write(0)\n    }\n\n    #[private]\n    fn respond_poke (commit_hash:Field, intention:u8, sender:AztecAddress) {\n        let mut options = NoteGetterOptions::new();\n        let notes = storage.pokes.at(context.msg_sender()).get_notes(options.select(PokeNote::properties().sender, Comparator.EQ, sender).set_offset(0));\n        let rn = notes.get(0).note;\n        let hashed_note = poseidon2(rn.to_fields()); // We should hash the individual field elements. This version is not re-producable on frontend. TODO\n\n        assert(hashed_note == commit_hash);\n        assert((intention == 1) | (intention == 2));\n    }\n\n\n    #[public]\n    pub fn update_commitment(commit_hash:Field, intention:u8) {\n        storage.intention.at(commit_hash).write(intention)\n    }\n\n    #[utility]\n    unconstrained pub fn get_pokes(owner:AztecAddress, page: u32) -> BoundedVec<PokeNote, 10> {\n\n        let mut opts = NoteViewerOptions::new();\n\n        let offset = page * 16;      \n        opts = opts.set_offset(offset);\n\n        storage.pokes\n          .at(owner)\n          .view_notes(opts)\n    }\n\n    #[utility]\n    unconstrained pub fn get_intention(commit_hash:Field) -> u8 {\n        storage.intention.at(commit_hash).read()\n    }\n\n    #[utility]\n    unconstrained pub fn get_address(instagram_hash:Field) -> AztecAddress {\n        storage.public_regs.at(instagram_hash).read()\n    }\n\n    #[utility]\n    unconstrained pub fn trial(caller: AztecAddress, sender: AztecAddress) -> BoundedVec<PokeNote, 10> {\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.pokes.at(caller).view_notes(options.select(PokeNote::properties().sender, Comparator.EQ, sender).set_offset(0));\n        notes\n    }\n\n}\n","path":"/Users/ouyildiz/Desktop/noir/zkpoke/src/main.nr"},"53":{"source":"use dep::aztec::{\n    macros::notes::note, oracle::random::random, protocol_types::{address::AztecAddress, traits::{Packable,ToField}},\n};\nuse dep::compressed_string::FieldCompressedString;\nuse crate::utils::as_field;\n\n\n#[note]\n#[derive(Eq)]\npub struct UserInfo {\n    owner: AztecAddress,\n    instagram_id: FieldCompressedString,\n    full_name: FieldCompressedString,\n    partial_name: FieldCompressedString,\n    nationality: FieldCompressedString,\n    randomness: Field,\n}\n\nimpl UserInfo {\n\n    pub fn new(\n        owner: AztecAddress,     \n        instagram_id: FieldCompressedString,\n        full_name: FieldCompressedString,\n        partial_name: FieldCompressedString,\n        nationality: FieldCompressedString,\n    ) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { owner, instagram_id, full_name, partial_name, nationality, randomness }\n    }\n\n    pub fn to_fields(self) -> [Field; 6] {\n        [\n            self.owner.to_field(),\n            as_field(self.instagram_id),\n            as_field(self.full_name),\n            as_field(self.partial_name),\n            as_field(self.nationality),\n            self.randomness,\n        ]\n    }\n}","path":"/Users/ouyildiz/Desktop/noir/zkpoke/src/user_info.nr"},"55":{"source":"use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/capsules/mod.nr"},"63":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"64":{"source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(\n            gas_opts.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_FIELD_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(\n            gas_opts.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_FIELD_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\nunconstrained fn call_static(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_static_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"66":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/context/utility_context.nr"},"70":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/hash.nr"},"85":{"source":"use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::{embedded_curve_ops::multi_scalar_mul, ops::Neg};\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr"},"86":{"source":"use std::embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // Safety: we use the randomness to preserve the privacy of both the sender and recipient via encryption, so a\n    // malicious sender could use non-random values to reveal the plaintext. But they already know it themselves anyway,\n    // and so the recipient already trusts them to not disclose this information. We can therefore assume that the\n    // sender will cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // TODO(#12757): compute the key pair without constraining eph_sk twice (once in from_field, once in the black box\n    // called by fixed_base_scalar_mul).\n    let eph_sk = EmbeddedCurveScalar::from_field(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr"},"87":{"source":"use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"91":{"source":"use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_notes` utility function PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    // TODO(https://github.com/noir-lang/noir/issues/7912): Doing the following unfortunately doesn't work. Once\n    // the issue is fixed uncomment the following and remove the workaround from TS (look for the issue link in the\n    // codebase).\n    // let utility: fn(FunctionDefinition) -> () = crate::macros::functions::utility;\n    // quote {\n    //     #[$utility]\n    //     unconstrained fn sync_notes() {\n    //     }\n    // }\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[aztec::macros::functions::utility]\n        unconstrained fn sync_notes() { }\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/aztec.nr"},"92":{"source":"use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr"},"96":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr"},"99":{"source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr"},"101":{"source":"use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/notes.nr"},"102":{"source":"use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/storage.nr"},"104":{"source":"use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr"},"105":{"source":"use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr"},"106":{"source":"use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr"},"108":{"source":"use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::sync_notes},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `syncNotes` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    sync_notes(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr"},"109":{"source":"use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr"},"110":{"source":"// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/encoding.nr"},"111":{"source":"use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr"},"118":{"source":"use crate::{\n    context::PrivateContext,\n    messages::{\n        encoding::encode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        logs::utils::prefix_with_tag,\n        msg_type::{PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID},\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteType},\n};\nuse protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n    traits::Packable,\n};\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists<let N: u32>(context: PrivateContext, note_hash_counter: u32) {\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\npub fn compute_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PRIVATE_NOTE_MSG_TYPE_ID,\n    )\n}\n\npub fn compute_partial_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID,\n    )\n}\n\nfn compute_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    msg_type: u64,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let packed_note = note.pack();\n\n    // A note message's content is the storage slot followed by the packed note representation\n    let mut msg_content: [Field; N + 1] = std::mem::zeroed();\n    msg_content[0] = storage_slot;\n    for i in 0..packed_note.len() {\n        msg_content[1 + i] = packed_note[i];\n    }\n\n    // Notes use the note type id for metadata\n    let plaintext = encode_message(msg_type, Note::get_id() as u64, msg_content);\n\n    let ciphertext = AES128::encrypt_log(plaintext, recipient);\n\n    let log = prefix_with_tag(ciphertext, sender, recipient);\n\n    log\n}\n\npub unconstrained fn compute_note_log_unconstrained<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_note_log(note, storage_slot, recipient, sender)\n}\n\n/// Sends an encrypted message to `recipient` with the content of the note, which they will discover when processing\n/// private logs.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n        assert_note_exists(*context, note_hash_counter);\n\n        let encrypted_log = compute_note_log(note, storage_slot, recipient, sender);\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\n/// Same as `encode_and_encrypt_note`, except encryption is unconstrained. This means that the sender is free to make\n/// the log contents be whatever they wish, potentially resulting in scenarios in which the recipient is unable to\n/// decrypt and process the payload, **leading to the note being lost**.\n///\n/// Only use this function in scenarios where the recipient not receiving the note is an acceptable outcome.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n\n        assert_note_exists(*context, note_hash_counter);\n\n        // Safety: this function does not constrain the encryption of the log, as explained on its description.\n        let encrypted_log =\n            unsafe { compute_note_log_unconstrained(note, storage_slot, recipient, sender) };\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/logs/note.nr"},"119":{"source":"use crate::{\n    oracle::notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n    prelude::AztecAddress,\n};\n\npub(crate) fn prefix_with_tag<let L: u32>(\n    log_without_tag: [Field; L],\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> [Field; L + 1] {\n    // Safety: we assume that the sender wants for the recipient to find the tagged note, and therefore that they will\n    // cooperate and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the\n    // note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut log_with_tag = [0; L + 1];\n\n    log_with_tag[0] = tag;\n    for i in 0..log_without_tag.len() {\n        log_with_tag[i + 1] = log_without_tag[i];\n    }\n\n    log_with_tag\n}\n\nmod test {\n    use super::prefix_with_tag;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn prefixing_with_tag() {\n        let sender = AztecAddress::from_field(1);\n        let recipient = AztecAddress::from_field(2);\n\n        let app_tagging_secret = 42;\n        let index = 5;\n\n        // I am using the deserialize trait instead of directly instantiating the IndexedTaggingSecret struct because\n        // direct instantiation functionality is not exposed.\n        let indexed_tagging_secret = IndexedTaggingSecret::deserialize([app_tagging_secret, index]);\n\n        // Mock the tagging oracles\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(indexed_tagging_secret);\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let log_without_tag = [1, 2, 3];\n        let log_with_tag = prefix_with_tag(log_without_tag, sender, recipient);\n\n        let expected_result = [indexed_tagging_secret.compute_tag(recipient), 1, 2, 3];\n\n        // Check tag was prefixed correctly\n        assert_eq(log_with_tag, expected_result, \"Tag was not prefixed correctly\");\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/logs/utils.nr"},"124":{"source":"use crate::context::PrivateContext;\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_interface::{NoteHash, NoteType},\n    retrieved_note::RetrievedNote,\n    utils::{compute_note_hash_for_nullify_from_read_request, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\nuse protocol_types::traits::Packable;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    let note_hash_counter = context.side_effect_counter;\n\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note = Note::pack(note);\n    notify_created_note(\n        storage_slot,\n        Note::get_id(),\n        packed_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(note, storage_slot, note_hash_counter)\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n\n    destroy_note_unsafe(context, retrieved_note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_from_read_request(retrieved_note, note_hash_for_read_request);\n    let nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash = if retrieved_note.metadata.is_settled() {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifying so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, note_hash)\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"126":{"source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n    pub storage_slot: Field,\n    pub note_hash_counter: u32, // a note_hash_counter of 0 means settled\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note, storage_slot: Field, note_hash_counter: u32) -> Self {\n        Self { note, storage_slot, note_hash_counter }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr"},"129":{"source":"use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    retrieved_note::RetrievedNote,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::{array, comparison::compare};\nuse dep::protocol_types::{\n    constants::{GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n    traits::{Packable, ToField},\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note[selector.index as u32].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[(31 + offset - i) as u32] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_packed_note<let N: u32>(packed_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (RetrievedNote<Note>, Field)\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    // Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    // is check that the metadata is correct, and that the note exists.\n    let retrieved_note = unsafe { get_note_internal::<Note, N>(storage_slot) };\n\n    // For settled notes, the contract address is implicitly checked since the hash returned from\n    // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n    // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the contract\n    // address returned from the oracle matches. Since branching in circuits is expensive, we perform this check on all\n    // note types.\n    assert(\n        retrieved_note.contract_address.eq(context.this_address()),\n        \"Note contract address mismatch.\",\n    );\n\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (retrieved_note, note_hash_for_read_request)\n}\n\n/// Returns a BoundedVec of notes that have been proven to have been created by this contract, either in the current or\n/// past transactions (i.e. pending or settled notes). A second BoundedVec contains the note hashes used for the read\n/// requests, which can save constraints when computing the note's nullifiers.\n///\n/// WARNING: recall that notes are never destroyed! Note existence therefore does not imply that the note is _current_\n/// or _valid_ - this typically requires also emitting the note's nullifier to prove that it had not been emitted\n/// before. Because of this, calling this function directly from end-user applications should be discouraged, and safe\n/// abstractions such as aztec-nr's state variables should be used instead.\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the notes (as opposed to simply removing some), the private\n    // kernel will later validate that these note actually exist, so transformations would cause for that check\n    // to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = array::collapse(filtered_notes);\n    let mut note_hashes = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_packed_note = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let retrieved_note = notes.get_unchecked(i);\n\n            // For settled notes, the contract address is implicitly checked since the hash returned from\n            // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n            // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the\n            // contract address returned from the oracle matches. Since branching in circuits is expensive, we perform\n            // this check on all note types.\n            assert(\n                retrieved_note.contract_address.eq(context.this_address()),\n                \"Note contract address mismatch.\",\n            );\n\n            let packed_note = retrieved_note.note.pack();\n            check_packed_note(packed_note, options.selects);\n            if i != 0 {\n                check_notes_order(prev_packed_note, packed_note, options.sorts);\n            }\n            prev_packed_note = packed_note;\n\n            let note_hash_for_read_request =\n                compute_note_hash_for_read_request(retrieved_note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> RetrievedNote<Note>\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let opt_notes: [_; 1] = oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_fields,\n    );\n\n    opt_notes[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\n/// Unconstrained variant of `get_notes`, meant to be used in unconstrained execution contexts. Notably only the note\n/// content is returned, and not any of the information used when proving its existence (e.g. nonce, note hash, etc.).\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteType + Packable<N> + Eq,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n\n    // We fetch the notes from the same oracle we use in the constrained case, except we don't bother inspecting the\n    // metadata in order to prove existence.\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    // Even though we don't expect for the opt_notes array to be sparse, collapse is still useful in this case to\n    // convert it into a BoundedVec.\n    array::collapse(opt_notes).map(\n        // view_notes just returns the actual note, so we drop the metadata\n        |retrieved_note| retrieved_note.note,\n    )\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects as u32] = select.unwrap_unchecked().value;\n            select_comparators[num_selects as u32] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/note/note_getter.nr"},"132":{"source":"use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr"},"135":{"source":"use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"139":{"source":"use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr"},"141":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"143":{"source":"use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"148":{"source":"use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"149":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"150":{"source":"use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"151":{"source":"use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn sync_notes(pending_tagged_log_array_base_slot: Field) {\n    sync_notes_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr"},"153":{"source":"use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"154":{"source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr"},"155":{"source":"use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr"},"156":{"source":"use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"158":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"160":{"source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER, hash::poseidon2_hash_with_separator,\n    traits::Packable,\n};\n\nuse crate::context::{PrivateContext, UtilityContext};\nuse crate::note::{\n    lifecycle::create_note,\n    note_emission::NoteEmission,\n    note_getter::{get_note, view_notes},\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateImmutable<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<N> for PrivateImmutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateImmutable<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateImmutable>` type (for example), because the storage slot often also identifies an actor.\n    // e.g. the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        poseidon2_hash_with_separator(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    }\n}\n\nimpl<Note> PrivateImmutable<Note, &mut PrivateContext> {\n    // docs:start:initialize\n    pub fn initialize<let N: u32>(self, note: Note) -> NoteEmission<Note>\n    where\n        Note: NoteType + NoteHash + Packable<N>,\n    {\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier);\n\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note<let N: u32>(self) -> Note\n    where\n        Note: NoteType + NoteHash + Packable<N>,\n    {\n        let storage_slot = self.storage_slot;\n        let retrieved_note = get_note(self.context, storage_slot).0;\n\n        // Because the notes obtained from PrivateImmutable are not meant to be nullified and get_note(...) function\n        // has already constrained the note (by pushing a read request to the context), we can return just the note\n        // and skip the additional data in RetrievedNote.\n        retrieved_note.note\n    }\n    // docs:end:get_note\n}\n\nimpl<Note> PrivateImmutable<Note, UtilityContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:is_initialized\n    pub unconstrained fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // view_note does not actually use the context, but it calls oracles that are only available in private\n    // docs:start:view_note\n    pub unconstrained fn view_note<let N: u32>(self) -> Note\n    where\n        Note: Packable<N>,\n    {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1)).get(0)\n    }\n    // docs:end:view_note\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/state_vars/private_immutable.nr"},"164":{"source":"use crate::context::{PrivateContext, UtilityContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::note::retrieved_note::RetrievedNote;\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::Packable,\n};\n\nmod test;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<N> for PrivateSet<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:insert\n    pub fn insert<let N: u32>(self, note: Note) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        let (retrieved_notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < retrieved_notes.len() {\n                let retrieved_note = retrieved_notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, retrieved_note, note_hash);\n            }\n        }\n\n        // Since the notes were already destroyed, we no longer need the additional data in RetrievedNote and can\n        // discard it.\n        retrieved_notes.map(|retrieved_note| retrieved_note.note)\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, retrieved_note: RetrievedNote<Note>) {\n        let note_hash = compute_note_hash_for_read_request(retrieved_note, self.storage_slot);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, retrieved_note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note> PrivateSet<Note, UtilityContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes<let N: u32>(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\n    where\n        Note: Packable<N>,\n    {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr"},"166":{"source":"use crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T> PublicImmutable<T, &mut PublicContext> {\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T> PublicImmutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::utility_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T> PublicImmutable<T, &mut PrivateContext> {\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr"},"167":{"source":"use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"181":{"source":"/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/array/append.nr"},"182":{"source":"/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    // Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr"},"184":{"source":"/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr"},"185":{"source":"use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr"},"186":{"source":"struct ComparatorEnum {\n    pub EQ: u8,\n    pub NEQ: u8,\n    pub LT: u8,\n    pub LTE: u8,\n    pub GT: u8,\n    pub GTE: u8,\n}\n\npub global Comparator: ComparatorEnum =\n    ComparatorEnum { EQ: 1, NEQ: 2, LT: 3, LTE: 4, GT: 5, GTE: 6 };\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::Comparator;\n    use super::compare;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            !compare(lhs, Comparator.LTE, rhs),\n            \"Expected lhs to not be less than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/comparison.nr"},"187":{"source":"use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr"},"188":{"source":"// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr"},"190":{"source":"use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/field.nr"},"192":{"source":"use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"193":{"source":"use crate::oracle::random::random;\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/random.nr"},"196":{"source":"use crate::{\n    context::{PublicContext, UtilityContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn utility_public_storage_read(\n        context: UtilityContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr"},"203":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/noir-lang/poseidon/v0.1.0/src/poseidon2.nr"},"220":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr"},"222":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"265":{"source":"use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"282":{"source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"283":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    poseidon::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as poseidon::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = poseidon::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = poseidon::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"284":{"source":"use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr"},"297":{"source":"use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint =\n        quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_pack & typ.implements(packable_constraint)) {\n        // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n        let name_at_one_token = collapse_to_one_token(name);\n        let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n        // We add the individual fields to the fields array\n        let pack_method = get_trait_impl_method(\n            typ,\n            quote { crate::traits::Packable<$packed_len> },\n            quote { pack },\n        );\n        let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n        for i in 0..packed_len {\n            fields = fields.push_back(quote { $packed_struct_name[$i] });\n        }\n\n        // We add the new auxiliary variable to the aux_vars array\n        aux_vars = aux_vars.push_back(packed_struct);\n    } else if typ.is_field() {\n        // For field we just add the value to fields\n        fields = fields.push_back(name);\n    } else if typ.as_integer().is_some() | typ.is_bool() {\n        // For integer and bool we just cast to Field and add the value to fields\n        fields = fields.push_back(quote { $name as Field });\n    } else if typ.as_data_type().is_some() {\n        // For struct we pref\n        let nested_struct = typ.as_data_type().unwrap();\n        let params = nested_struct.0.fields(nested_struct.1);\n        let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n            let maybe_prefixed_name = if name == quote {} {\n                // Triggered when the param name is of a value available in the current scope (e.g. a function\n                // argument) --> then we don't prefix the name with anything.\n                param_name\n            } else {\n                // Triggered when we want to prefix the param name with the `name` from function input. This\n                // can typically be `self` when implementing a method on a struct.\n                quote { $name.$param_name }\n            };\n            generate_serialize_to_fields(quote {$maybe_prefixed_name}, param_type, should_pack)\n        });\n        let struct_flattened_fields = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n        );\n        let struct_flattened_aux_vars = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n        );\n        fields = fields.append(struct_flattened_fields);\n        aux_vars = aux_vars.append(struct_flattened_aux_vars);\n    } else if typ.as_array().is_some() {\n        // For array we recursively call `generate_serialize_to_fields(...)` for each element\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        for i in 0..array_len {\n            let (element_fields, element_aux_vars) =\n                generate_serialize_to_fields(quote { $name[$i] }, element_type, should_pack);\n            fields = fields.append(element_fields);\n            aux_vars = aux_vars.append(element_aux_vars);\n        }\n    } else if typ.as_str().is_some() {\n        // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n        // then we add each byte to fields as a Field\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let as_member = name.as_expr().unwrap().as_member_access();\n        let var_name = if as_member.is_some() {\n            as_member.unwrap().1\n        } else {\n            name\n        };\n        let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n        let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n        for i in 0..str_len {\n            fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n        }\n        aux_vars = aux_vars.push_back(as_bytes);\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr"},"299":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"300":{"source":"use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr"},"309":{"source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr"},"320":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"334":{"source":"use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"338":{"source":"use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr"},"339":{"source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"355":{"source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr"},"356":{"source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"358":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"368":{"source":"use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr"},"370":{"source":"use dep::aztec::protocol_types::{\n    traits::{Deserialize, Packable, Serialize},\n    utils::field::field_from_bytes,\n};\nuse std::meta::derive;\n\n// A Fixedsize Compressed String.\n// Essentially a special version of Compressed String for practical use.\n#[derive(Deserialize, Eq, Packable, Serialize)]\npub struct FieldCompressedString {\n    value: Field,\n}\n\nimpl FieldCompressedString {\n    pub fn is_eq(self, other: FieldCompressedString) -> bool {\n        self.value == other.value\n    }\n\n    pub fn from_field(input_field: Field) -> Self {\n        Self { value: input_field }\n    }\n\n    pub fn from_string(input_string: str<31>) -> Self {\n        Self { value: field_from_bytes(input_string.as_bytes(), true) }\n    }\n\n    pub fn to_bytes(self) -> [u8; 31] {\n        self.value.to_be_bytes()\n    }\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/compressed-string/src/field_compressed_string.nr"},"666":{"source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n","path":"/Users/ouyildiz/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"}}}